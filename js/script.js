// Generated by CoffeeScript 1.10.0
(function () {
    var MARGIN_LEFT, MARGIN_TOP, RADIUS, WINDOW_HEIGHT, WINDOW_WIDTH, addBalls, balls, calTime, colors, curShowTimeSeconds, endTime, getCurShowTimeSeconds, ref, ref1, render, renderBall, renderDigit, update, updateBalls;

    ref = [1024, 768], WINDOW_WIDTH = ref[0], WINDOW_HEIGHT = ref[1];

    ref1 = [60, 30], MARGIN_TOP = ref1[0], MARGIN_LEFT = ref1[1];

    RADIUS = 8;

    endTime = new Date();

    endTime.setTime(endTime.getTime() + 3600 * 1000);

    curShowTimeSeconds = 0;

    balls = [];

    colors = ["#33B5E5", "#0099CC", "#AA66CC", "#9933CC", "#99CC00", "#669900", "#FFBB33", "#FF8800", "#FF4444", "#CC0000"];

    window.onload = function () {
        var canvas, context, ref2;
        WINDOW_WIDTH = document.documentElement.clientWidth;
        WINDOW_HEIGHT = document.documentElement.clientHeight;
        MARGIN_LEFT = Math.round(WINDOW_WIDTH / 10);
        MARGIN_TOP = Math.round(WINDOW_HEIGHT / 5);
        RADIUS = Math.round((WINDOW_WIDTH * 4 / 5 / 108) - 1);
        canvas = document.getElementById('canvas');
        context = canvas.getContext('2d');
        ref2 = [WINDOW_WIDTH, WINDOW_HEIGHT], canvas.width = ref2[0], canvas.height = ref2[1];
        curShowTimeSeconds = getCurShowTimeSeconds();
        return setInterval(function () {
            render(context);
            return update();
        }, 50);
    };

    calTime = function (allSeconds) {
        var hours, minutes, seconds;
        hours = Math.floor(allSeconds / 3600);
        minutes = Math.floor((allSeconds - hours * 3600) / 60);
        seconds = allSeconds % 60;
        return [hours, minutes, seconds];
    };

    getCurShowTimeSeconds = function () {
        var curTime, ret;
        curTime = new Date;
        ret = curTime.getHours() * 3600 + curTime.getMinutes() * 60 + curTime.getSeconds();
        if (ret >= 0) {
            return ret;
        } else {
            return 0;
        }
    };

    updateBalls = function () {
        var ball, cnt, k, l, len, len1, results;
        for (k = 0, len = balls.length; k < len; k++) {
            ball = balls[k];
            ball.x += ball.vx;
            ball.y += ball.vy;
            ball.vy += ball.g;
            if (ball.y >= WINDOW_HEIGHT - RADIUS) {
                ball.y = WINDOW_HEIGHT - RADIUS;
                ball.vy = -ball.vy * 0.75;
            }
        }
        for (l = 0, len1 = balls.length; l < len1; l++) {
            ball = balls[l];
            if (ball.x + RADIUS > 0 && ball.x - RADIUS < WINDOW_WIDTH) {
                balls[cnt = cnt != null ? cnt + 1 : 0] = ball;
            }
        }
        results = [];
        while (balls.length > Math.min(cnt, 300)) {
            results.push(balls.pop());
        }
        return results;
    };

    update = function () {
        var curHours, curMinutes, curSeconds, curTimeList, i, k, nextHours, nextMinutes, nextSeconds, nextShowTimeSeconds, nextTimeList, posList, ref2, ref3;
        nextShowTimeSeconds = getCurShowTimeSeconds();
        ref2 = calTime(nextShowTimeSeconds), nextHours = ref2[0], nextMinutes = ref2[1], nextSeconds = ref2[2];
        ref3 = calTime(curShowTimeSeconds), curHours = ref3[0], curMinutes = ref3[1], curSeconds = ref3[2];
        curTimeList = [Math.floor(curHours / 10), curHours % 10, Math.floor(curMinutes / 10), curMinutes % 10, Math.floor(curSeconds / 10), curSeconds % 10];
        nextTimeList = [Math.floor(nextHours / 10), nextHours % 10, Math.floor(nextMinutes / 10), nextMinutes % 10, Math.floor(nextSeconds / 10), nextSeconds % 10];
        posList = [0, 15, 39, 54, 78, 93];
        if (nextShowTimeSeconds !== curShowTimeSeconds) {
            for (i = k = 0; k <= 5; i = ++k) {
                if (curTimeList[i] !== nextTimeList[i]) {
                    addBalls(MARGIN_LEFT + posList[i] * (RADIUS + 1), MARGIN_TOP, curTimeList[i]);
                }
            }
            curShowTimeSeconds = nextShowTimeSeconds;
        }
        return updateBalls();
    };

    addBalls = function (x, y, num) {
        var aBall, i, j, k, ref2, results;
        results = [];
        for (i = k = 0, ref2 = digit[num].length - 1; 0 <= ref2 ? k <= ref2 : k >= ref2; i = 0 <= ref2 ? ++k : --k) {
            results.push((function () {
                var l, ref3, results1;
                results1 = [];
                for (j = l = 0, ref3 = digit[num][i].length - 1; 0 <= ref3 ? l <= ref3 : l >= ref3; j = 0 <= ref3 ? ++l : --l) {
                    if (digit[num][i][j] === 1) {
                        aBall = {
                            x: x + j * 2 * (RADIUS + 1) + (RADIUS + 1),
                            y: y + i * 2 * (RADIUS + 1) + (RADIUS + 1),
                            g: 1.5 + Math.random(),
                            vx: Math.pow(-1, Math.ceil(Math.random() * 1000)) * 5,
                            vy: -5,
                            color: colors[Math.floor(Math.random() * colors.length)]
                        };
                        results1.push(balls.push(aBall));
                    } else {
                        results1.push(void 0);
                    }
                }
                return results1;
            })());
        }
        return results;
    };

    render = function (cxt) {
        var ball, hours, i, item, k, l, len, len1, minutes, posList, ref2, ref3, results, seconds;
        cxt.clearRect(0, 0, WINDOW_WIDTH, WINDOW_HEIGHT);
        ref2 = calTime(curShowTimeSeconds), hours = ref2[0], minutes = ref2[1], seconds = ref2[2];
        posList = [0, 15, 30, 39, 54, 69, 78, 93];
        i = 0;
        ref3 = [hours, minutes, seconds];
        for (k = 0, len = ref3.length; k < len; k++) {
            item = ref3[k];
            renderDigit(MARGIN_LEFT + posList[i++] * (RADIUS + 1), MARGIN_TOP, Math.floor(item / 10), cxt);
            renderDigit(MARGIN_LEFT + posList[i++] * (RADIUS + 1), MARGIN_TOP, item % 10, cxt);
            if (item === hours || item === minutes) {
                renderDigit(MARGIN_LEFT + posList[i++] * (RADIUS + 1), MARGIN_TOP, 10, cxt);
            }
        }
        results = [];
        for (l = 0, len1 = balls.length; l < len1; l++) {
            ball = balls[l];
            results.push(renderBall(ball, cxt));
        }
        return results;
    };

    renderBall = function (ball, cxt) {
        cxt.fillStyle = ball.color;
        cxt.beginPath();
        cxt.arc(ball.x, ball.y, RADIUS, 0, 2 * Math.PI, true);
        cxt.closePath();
        return cxt.fill();
    };

    renderDigit = function (x, y, num, cxt) {
        var i, j, k, ref2, results;
        cxt.fillStyle = "rgb(0,102,153)";
        results = [];
        for (i = k = 0, ref2 = digit[num].length - 1; 0 <= ref2 ? k <= ref2 : k >= ref2; i = 0 <= ref2 ? ++k : --k) {
            results.push((function () {
                var l, ref3, results1;
                results1 = [];
                for (j = l = 0, ref3 = digit[num][i].length - 1; 0 <= ref3 ? l <= ref3 : l >= ref3; j = 0 <= ref3 ? ++l : --l) {
                    if (digit[num][i][j] === 1) {
                        cxt.beginPath();
                        cxt.arc(x + j * 2 * (RADIUS + 1) + (RADIUS + 1), y + i * 2 * (RADIUS + 1) + (RADIUS + 1), RADIUS, 0, 2 * Math.PI);
                        cxt.closePath();
                        results1.push(cxt.fill());
                    } else {
                        results1.push(void 0);
                    }
                }
                return results1;
            })());
        }
        return results;
    };

}).call(this);
